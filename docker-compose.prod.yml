version: '3.8'

services:
  api-server:
    build: .
    container_name: whtzup-api
    restart: unless-stopped
    ports:
      - "4000:4000"  # HTTP
      - "4001:4001"  # HTTPS
    environment:
      - NODE_ENV=production
      - PORT=4000
      - HTTPS_PORT=4001
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - SSL_KEY_PATH=${SSL_KEY_PATH:-/app/ssl/server.key}
      - SSL_CERT_PATH=${SSL_CERT_PATH:-/app/ssl/server.crt}
    depends_on:
      - postgres
      - redis
    networks:
      - whtzup-network
    volumes:
      - ./logs:/app/logs
      - ${SSL_KEY_PATH:-./ssl/server.key}:/app/ssl/server.key:ro
      - ${SSL_CERT_PATH:-./ssl/server.crt}:/app/ssl/server.crt:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: whtzup-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=whtzup_events
      - POSTGRES_USER=whtzup_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - whtzup-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whtzup_user -d whtzup_events"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: whtzup-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - whtzup-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  whtzup-network:
    driver: bridge
